.data
prompt_n: .asciiz "Enter the number of elements in the array: "
prompt_elem: .asciiz "Enter an element: "
positive_count_msg: .asciiz "Number of strictly positive elements: "
newline: .asciiz "\n"

.text
.globl _start

_start:
    # Prompt for the number of elements
    li $v0, 4
    la $a0, prompt_n
    syscall

    # Read the number of elements
    li $v0, 5
    syscall
    move $t0, $v0  # $t0 now contains the number of elements (n)

    # Check if n > 0
    blez $t0, end_program

    # Initialize base address for array storage
    la $t1, array_base

    # Loop to read elements into the array
    move $t2, $zero  # $t2 will serve as the index

read_elements:
    li $v0, 4
    la $a0, prompt_elem
    syscall

    li $v0, 5
    syscall
    sw $v0, 0($t1)  # Store the element in the array
    addi $t1, $t1, 4  # Move to the next array position
    addi $t2, $t2, 1  # Increment the index
    blt $t2, $t0, read_elements  # Loop until all elements are read

    # Calculate the number of strictly positive elements
    move $t1, array_base  # Reset base address for array traversal
    move $t2, $zero  # Reset index
    move $t3, $zero  # $t3 will count strictly positive elements

count_positive:
    lw $t4, 0($t1)  # Load the current element
    blez $t4, skip_increment  # If element <= 0, skip increment
    addi $t3, $t3, 1  # Increment the positive count

skip_increment:
    addi $t1, $t1, 4  # Move to the next array position
    addi $t2, $t2, 1  # Increment the index
    blt $t2, $t0, count_positive  # Loop until all elements are checked

    # Print the number of strictly positive elements
    li $v0, 4
    la $a0, positive_count_msg
    syscall

    move $a0, $t3  # Move the count to $a0 for printing
    li $v0, 1
    syscall

    # Print a newline at the end
    li $v0, 4
    la $a0, newline
    syscall

end_program:
    # Exit the program
    li $v0, 10
    syscall

.data
.align 2
array_base: .space 400  # Allocate space for up to 100 integers (4 bytes each)
